@page "/leaseholdersinformation_dapper"

@using VicStelmak.DEFDA.WebUI.Pages.Components_Dapper;

<PageTitle>Leaseholders Information</PageTitle>

<h1>Leaseholders Information</h1>

<div class="row">
    <div class="col-lg-3 text-right">
        <button type="button" class="btn btn-success btn-sm" @onclick="@(() => ShowAddLeaseholderModalWindowAsync())">Add New Leaseholder</button>
    </div>
</div>
<br />

@if (Leaseholders != null && Leaseholders.Leaseholders.Count > 0)
{
    sequenceNumber = 0;

    <table class="table table-bordered table-striped table-sm">
        <thead>
            <tr>
                <th>Seq. No.</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Addresses</th>
                <th>Email Addresses</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leaseholder in Leaseholders.Leaseholders)
            {
                IncrementSequenceNumber();

                <tr>
                    <td>@sequenceNumber</td>
                    <td>@leaseholder.FirstName</td>
                    <td>@leaseholder.LastName</td>
                    <td>
                        <ul>
                            @foreach (var address in Leaseholders.AddressesWithoutId.Where(address => address.LeaseholderId == leaseholder.Id))
                            {
                                if (address.LeaseholderId != null)
                                {
                                    <li>@address.PostalCode, @address.ApartmentNumber, @address.BuildingNumber, @address.Street, @address.City, @address.Region</li>
                                }
                            }
                        </ul>
                    </td>
                    <td>
                        <ul>
                            @foreach (var emailAddress in Leaseholders.EmailAddressesWithoutId.Where(e => e.LeaseholderId == leaseholder.Id))
                            {
                                if (emailAddress.LeaseholderId != null)
                                {
                                    <li>@emailAddress.EmailAddress</li>
                                }
                            }
                        </ul>
                    </td>
                    <td class="text-right">
                        <a type="button" class="btn btn-primary btn-sm" href="/leaseholdersinformation_dapper/details/@leaseholder.Id">Details</a>
                        <a type="button" class="btn btn-secondary btn-sm" href="/leaseholdersinformation_dapper/edit/@leaseholder.Id">Edit</a>
                        <button type="button" class="btn btn-success btn-sm" @onclick="@(() => ShowAddAddressModalWindowAsync(leaseholder.Id))">Add Address</button>
                        <button type="button" class="btn btn-success btn-sm" @onclick="@(() => ShowAddEmailAddressModalWindowAsync(leaseholder.Id))">Add Email Address</button>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => ShowLeaseholderDeletionConfirmationModalWindowAsync(leaseholder.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter]
    public IModalService? ModalService { get; set; }

    private int sequenceNumber;

    public LeaseholderInformationDapperViewModel Leaseholders { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Leaseholders = new();
        Leaseholders.Addresses = await _mediator.Send(new GetAddressesListDapperQuery());
        Leaseholders.AddressesWithoutId = Leaseholders.Addresses.Select(address => _mapper.From(address).AdaptToType<AddressWithoutIdResponse>()).ToList();
        Leaseholders.EmailAddresses = await _mediator.Send(new GetEmailAddressesListDapperQuery());
        Leaseholders.EmailAddressesWithoutId = Leaseholders.EmailAddresses.Select(emailAddress => 
            _mapper.From(emailAddress).AdaptToType<EmailAddressWithoutIdResponse>()).ToList();
        Leaseholders.Leaseholders = await _mediator.Send(new GetLeaseholdersListDapperQuery());
    }

    private void IncrementSequenceNumber()
    {
        sequenceNumber++;
    }
    
    private async Task ShowAddAddressModalWindowAsync(int leaseholderId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(AddAddressToLeaseholder_Dapper.LeaseholderId), leaseholderId);

        var addAddressEditForm = ModalService.Show<AddAddressToLeaseholder_Dapper>("Add Address to Leaseholder", modalParameters);
        var addAddressEditFormResult = await addAddressEditForm.Result;
    }

    private async Task ShowAddEmailAddressModalWindowAsync(int leaseholderId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(AddEmailAddressToLeaseholder_Dapper.LeaseholderId), leaseholderId);

        var addEmailAddressEditForm = ModalService.Show<AddEmailAddressToLeaseholder_Dapper>("Add Email Address to Leaseholder", modalParameters);
        var addEmailAddressEditFormResult = await addEmailAddressEditForm.Result;
    }

    private async Task ShowLeaseholderDeletionConfirmationModalWindowAsync(int leaseholderId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(LeaseholderDeletionConfirmation_Dapper.LeaseholderId), leaseholderId);

        var leaseholderDeletionConfirmationWindow = ModalService.Show<LeaseholderDeletionConfirmation_Dapper>(
            "Are you sure you want to delete this leaseholder?", modalParameters);
        var leaseholderDeletionConfirmationWindowResult = await leaseholderDeletionConfirmationWindow.Result;
    }

    private async Task ShowAddLeaseholderModalWindowAsync()
    {
        var addLeaseholderEditForm = ModalService.Show<AddLeaseholder_Dapper>("Add New Leaseholder");
        var addLeaseholderEditFormResult = await addLeaseholderEditForm.Result;
    }
}

