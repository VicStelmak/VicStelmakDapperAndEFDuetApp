@inject NavigationManager _navManager

@if (Leaseholder != null)
{
    <div class="row">
        <div class="col-lg-9">
            <h2>@Leaseholder.FirstName @Leaseholder.LastName</h2><br>
        </div>
    </div>

    <EditForm Model="@Address" OnValidSubmit="@SubmitAddressAsync">
        <div class="form-group">
            <label>Postal Code</label>
            <InputText id="PostalCode" class="form-control" @bind-Value="Address.PostalCode" />
        </div>
        <div class="form-group">
            <label>Apartment Number</label>
            <InputNumber class="form-control" @bind-Value="Address.ApartmentNumber" />
        </div>
        <div class="form-group">
            <label>Building Number</label>
            <InputText class="form-control" @bind-Value="Address.BuildingNumber" />
        </div>
        <div class="form-group">
            <label>Street</label>
            <InputText class="form-control" @bind-Value="Address.Street" />
        </div>
        <div class="form-group">
            <label>City</label>
            <InputText class="form-control" @bind-Value="Address.City" />
        </div>
        <div class="form-group">
            <label>Region</label>
            <InputText class="form-control" @bind-Value="Address.Region" />
        </div>
        <br>
        <button type="submit" class="btn btn-primary">Add Address</button>
        <button type="button" class="btn btn-warning" style="margin: 7px 0px" @onclick="@(e => CancelEdit())">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public LeaseholderModel Leaseholder { get; set; }

    private AddressModel Address { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Address = new AddressModel();
    }

    private async void SubmitAddressAsync()
    {
        if (!string.IsNullOrEmpty(Address.PostalCode) && !string.IsNullOrEmpty(Address.BuildingNumber) && !string.IsNullOrEmpty(Address.Street)
            && !string.IsNullOrEmpty(Address.City) && !string.IsNullOrEmpty(Address.Region) && Address.ApartmentNumber != 0)
        {
            await _addressService.CreateAddressByLeaseholderIdAsync(Address, Leaseholder.Id);
        }

        _navManager.NavigateTo("/leaseholdersinformation_entityframework", forceLoad: true);
    }

    private void CancelEdit()
    {
        _navManager.NavigateTo("/leaseholdersinformation_entityframework");
    }
}
