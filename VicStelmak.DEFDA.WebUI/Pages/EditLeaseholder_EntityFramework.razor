@page "/leaseholdersinformation_entityframework/edit/{id:int}"

@using VicStelmak.DEFDA.WebUI.Pages.Components;
@inject NavigationManager _navManager

@if (Leaseholder != null)
{
    <div class="row">
        <div class="col-lg-9">
            <h1>Edit Leaseholder's Details</h1>
        </div>
        <div class="col-lg-3 text-right">
            <a type="button" class="btn btn-secondary btn-sm" href="/leaseholdersinformation_entityframework">Go Back To List</a>
        </div>
    </div>

    <label style="margin:7px 0px">Personal Details:</label>
    <table class="table table-bordered table-striped table-sm" style="text-align:center;vertical-align:middle">
        <thead>
            <tr style="display:flex;margin-right:50%">
                <th style="flex:1">First Name</th>
                <th style="flex:1">Last Name</th>
                <th style="flex:1">Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr style="display:flex;margin-right:50%">
                <td style="flex:1">@Leaseholder.FirstName</td>
                <td style="flex:1">@Leaseholder.LastName</td>
                <td style="flex:1;text-align:left">
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => ShowEditLeaseholderPersonalDetailsModalWindowAsync(Leaseholder))">Edit</button>
                </td>
            </tr>
        </tbody>
    </table>

    <label style="margin:7px 0px">Email Addresses</label>
    @if (EmailAddresses != null && EmailAddresses.Count > 0)
    {
        sequenceNumber = 0;
        
        <table class="table table-bordered table-striped table-sm" style="text-align:center;vertical-align:middle">
            <thead>
                <tr style="display:flex;margin-right:50%">
                    <th style="flex:1">Seq. No.</th>
                    <th style="flex:1">Email Address</th>
                    <th style="flex:1">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var emailAddress in EmailAddresses.Where(e => e.LeaseholderId == Id))
                {
                    IncrementSequenceNumber();

                    <tr style="display:flex;margin-right:50%">
                        <td style="flex:1">@sequenceNumber</td>
                        <td style="flex:1">@emailAddress.EmailAddress</td>
                        <td style="flex:1;text-align:left">
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => ShowEditEmailAddressModalWindowAsync(emailAddress))">Edit</button>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => ShowEmailAddressDeletionConfirmationModalWindowAsync(emailAddress))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <label style="margin:7px 0px">Addresses</label>
    @if (Addresses != null && Addresses.Count > 0)
    {
        sequenceNumber = 0;

        <table class="table table-bordered table-striped table-sm" style="text-align:center">
            <thead>
                <tr style="display:flex;margin-right:50%;text-align:center">
                    <th style="flex:1">Seq. No.</th>
                    <th style="flex:1;padding-top:2%">Postal Code</th>
                    <th style="flex:1">Apartment Number</th>
                    <th style="flex:1">Building Number</th>
                    <th style="flex:1;padding-top:2%">Street</th>
                    <th style="flex:1;padding-top:2%">City</th>
                    <th style="flex:1;padding-top:2%">Region</th>
                    <th style="flex:1;padding-top:2%">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var address in Addresses.Where(a => a.LeaseholderId == Id))
                {
                    IncrementSequenceNumber();

                    <tr style="display:flex;margin-right:50%;">
                        <td style="flex:1;padding-top:3%">@sequenceNumber</td>
                        <td style="flex:1;padding-top:3%">@address.PostalCode</td>
                        <td style="flex:1;padding-top:3%">@address.ApartmentNumber</td>
                        <td style="flex:1;padding-top:3%">@address.BuildingNumber</td>
                        <td style="flex:1;padding-top:3%">@address.Street</td>
                        <td style="flex:1;padding-top:3%">@address.City</td>
                        <td style="flex:1;padding-top:3%">@address.Region</td>
                        <td style="text-align:left;flex:1;padding-top:3%">
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => ShowEditAddressModalWindowAsync(address))">Edit</button>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => ShowAddressDeletionConfirmationModalWindowAsync(address))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [CascadingParameter]
    public IModalService? ModalService { get; set; }
    [Parameter]
    public AddressModel Address { get; set; }
    [Parameter]
    public EmailAddressModel EmailAddress { get; set; }
    [Parameter]
    public LeaseholderModel Leaseholder
    {
        get => leaseholder;
        set
        {
            leaseholder = value;
            LeaseholderClone = new LeaseholderModel
                {
                    Id = value.Id,
                    FirstName = value.FirstName,
                    LastName = value.LastName,
                };
        }
    }
    [Parameter]
    public int Id { get; set; }

    private LeaseholderModel LeaseholderClone { get; set; }

    private bool shouldRender;
    private int sequenceNumber;

    private LeaseholderModel leaseholder;

    private List<AddressModel> Addresses { get; set; }
    private List<EmailAddressModel> EmailAddresses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Address = await _addressService.GetAddressByIdAsync(Id);
        EmailAddress = await _emailAddressService.GetEmailAddressByIdAsync(Id);
        Leaseholder = await _leaseholderService.GetLeaseholderByIdAsync(Id);
        EmailAddresses = await _emailAddressService.GetEmailAddressesListAsync();
        Addresses = await _addressService.GetAddressesListAsync();
    }
    //<summary>
    // OnParametersSet() is being used along with ShouldRender() not to allow razor component to rerender without neccesity.
    //</summary>
    protected override void OnParametersSet()
    {
        shouldRender = true;
    } 
    protected override bool ShouldRender()
    {
        if(shouldRender)
        {
            shouldRender = false;
            return true;
        }
        else
        {
            return false;
        }
    }

    private AddressModel CreateAddressInstanceCloneVariable(AddressModel address)
    {
        AddressModel addressClone = new AddressModel();
        addressClone.Id = address.Id;
        addressClone.PostalCode = address.PostalCode;
        addressClone.ApartmentNumber = address.ApartmentNumber;
        addressClone.BuildingNumber = address.BuildingNumber;
        addressClone.Street = address.Street;
        addressClone.City = address.City;
        addressClone.Region = address.Region;

        return addressClone;
    }

    private EmailAddressModel CreateEmailAddressInstanceCloneVariable(EmailAddressModel emailAddress)
    {
        EmailAddressModel emailAddressClone = new EmailAddressModel();
        emailAddressClone.Id = emailAddress.Id;
        emailAddressClone.EmailAddress = emailAddress.EmailAddress;

        return emailAddressClone;
    }

    private void IncrementSequenceNumber()
    {
        sequenceNumber++;
    }

    private void RevertAddressInstanceValuesToCloneVariableValues(AddressModel address, AddressModel addressClone)
    {
        address.Id = addressClone.Id;
        address.PostalCode = addressClone.PostalCode;
        address.ApartmentNumber = addressClone.ApartmentNumber;
        address.BuildingNumber = addressClone.BuildingNumber;
        address.Street = addressClone.Street;
        address.City = addressClone.City;
        address.Region = addressClone.Region;
    }

    private void RevertEmailAddressInstanceValuesToCloneVariableValues(EmailAddressModel emailAddress, EmailAddressModel emailAddressClone)
    {
        emailAddress.Id = emailAddressClone.Id;
        emailAddress.EmailAddress = emailAddressClone.EmailAddress;
    }

    private async Task ShowAddressDeletionConfirmationModalWindowAsync(AddressModel address)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(AddressDeletionConfirmation_EntityFramework.Address), address);

        var addressDeletionConfirmationWindow = ModalService.Show<AddressDeletionConfirmation_EntityFramework>
            ("Are you sure you want to delete this address?", modalParameters);
        var addressDeletionConfirmationWindowResult = await addressDeletionConfirmationWindow.Result;
    }

    private async Task ShowEditAddressModalWindowAsync(AddressModel address)
    {
        AddressModel addressClone = CreateAddressInstanceCloneVariable(address);

        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EditAddress_EntityFramework.Address), address);

        var editAddressEditForm = ModalService.Show<EditAddress_EntityFramework>("You can edit leaseholder's address below:", modalParameters);
        var editAddressEditFormResult = await editAddressEditForm.Result;

        if (editAddressEditFormResult.Cancelled)
        {
            RevertAddressInstanceValuesToCloneVariableValues(address, addressClone);
        }
    }

    private async Task ShowEmailAddressDeletionConfirmationModalWindowAsync(EmailAddressModel emailAddress)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EmailAddressDeletionConfirmation_EntityFramework.EmailAddress), emailAddress);

        var emailAddressDeletionConfirmationWindow = ModalService.Show<EmailAddressDeletionConfirmation_EntityFramework>
            ("Are you sure you want to delete this email address?", modalParameters);
        var emailAddressDeletionConfirmationWindowResult = await emailAddressDeletionConfirmationWindow.Result;
    }

    private async Task ShowEditEmailAddressModalWindowAsync(EmailAddressModel emailAddress)
    {
        EmailAddressModel emailAddressClone = CreateEmailAddressInstanceCloneVariable(emailAddress);

        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EditEmailAddress_EntityFramework.EmailAddress), emailAddress);

        var editEmailAddressEditForm = ModalService.Show<EditEmailAddress_EntityFramework>("You can edit leaseholder's email address below:", modalParameters);
        var editEmailAddressEditFormResult = await editEmailAddressEditForm.Result;

        if (editEmailAddressEditFormResult.Cancelled)
        {
            RevertEmailAddressInstanceValuesToCloneVariableValues(emailAddress, emailAddressClone);
        }
    }

    private async Task ShowLeaseholderDeletionConfirmationModalWindowAsync(LeaseholderModel leaseholder)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(LeaseholderDeletionConfirmation_EntityFramework.Leaseholder), leaseholder);

        var leaseholderDeletionConfirmationWindow = ModalService.Show<LeaseholderDeletionConfirmation_EntityFramework>
            ("Are you sure you want to delete this leaseholder?", modalParameters);
        var leaseholderDeletionConfirmationWindowResult = await leaseholderDeletionConfirmationWindow.Result;
    }

    private async Task ShowEditLeaseholderPersonalDetailsModalWindowAsync(LeaseholderModel leaseholder)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EditLeaseholderPersonalDetails_EntityFramework.Leaseholder), leaseholder);

        var editLeaseholderPersonalDetailsEditForm = ModalService.Show<EditLeaseholderPersonalDetails_EntityFramework>
            ("You can edit leaseholder's personal details below:", modalParameters);
        var editLeaseholderPersonalDetailsEditFormResult = await editLeaseholderPersonalDetailsEditForm.Result;

        if (editLeaseholderPersonalDetailsEditFormResult.Cancelled)
        {
            leaseholder.Id = LeaseholderClone.Id;
            leaseholder.FirstName = LeaseholderClone.FirstName;
            leaseholder.LastName = LeaseholderClone.LastName;
        }
    }
}
