@page "/leaseholdersinformation_entityframework/edit/{id:int}"

@using VicStelmak.DEFDA.WebUI.Pages.Components_EntityFramework;
@inject NavigationManager _navManager

@if (LeaseholderViewModel != null)
{
    <div class="row">
        <div class="col-lg-9">
            <h1>Edit Leaseholder's Details</h1>
        </div>
        <div class="col-lg-3 text-right">
            <a type="button" class="btn btn-secondary btn-sm" href="/leaseholdersinformation_entityframework">Go Back To List</a>
        </div>
    </div>

    <label style="margin:7px 0px">Personal Details:</label>
    <table class="table table-bordered table-striped table-sm" style="text-align:center;vertical-align:middle">
        <thead>
            <tr style="display:flex;margin-right:50%">
                <th style="flex:1">First Name</th>
                <th style="flex:1">Last Name</th>
                <th style="flex:1">Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr style="display:flex;margin-right:50%">
                <td style="flex:1">@LeaseholderViewModel.FirstName</td>
                <td style="flex:1">@LeaseholderViewModel.LastName</td>
                <td style="flex:1;text-align:left">
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => ShowEditLeaseholderPersonalDetailsModalWindowAsync(Id))">Edit</button>
                </td>
            </tr>
        </tbody>
    </table>

    <label style="margin:7px 0px">Email Addresses</label>
    @if (LeaseholderViewModel.EmailAddressesWithoutLeaseholderId != null && LeaseholderViewModel.EmailAddressesWithoutLeaseholderId.Count > 0)
    {
        sequenceNumber = 0;

        <table class="table table-bordered table-striped table-sm" style="text-align:center;vertical-align:middle">
            <thead>
                <tr style="display:flex;margin-right:50%">
                    <th style="flex:1">Seq. No.</th>
                    <th style="flex:1">Email Address</th>
                    <th style="flex:1">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var emailAddress in LeaseholderViewModel.EmailAddressesWithoutLeaseholderId)
                {
                    IncrementSequenceNumber();

                    <tr style="display:flex;margin-right:50%">
                        <td style="flex:1">@sequenceNumber</td>
                        <td style="flex:1">@emailAddress.EmailAddress</td>
                        <td style="flex:1;text-align:left">
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => ShowEditEmailAddressModalWindowAsync(emailAddress.Id))">Edit</button>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => ShowEmailAddressDeletionConfirmationModalWindowAsync(emailAddress.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <label style="margin:7px 0px">Addresses</label>
    @if (LeaseholderViewModel.AddressesWithoutLeaseholderId != null && LeaseholderViewModel.AddressesWithoutLeaseholderId.Count > 0)
    {
        sequenceNumber = 0;

        <table class="table table-bordered table-striped table-sm" style="text-align:center">
            <thead>
                <tr style="display:flex;margin-right:50%;text-align:center">
                    <th style="flex:1">Seq. No.</th>
                    <th style="flex:1;padding-top:2%">Postal Code</th>
                    <th style="flex:1">Apartment Number</th>
                    <th style="flex:1">Building Number</th>
                    <th style="flex:1;padding-top:2%">Street</th>
                    <th style="flex:1;padding-top:2%">City</th>
                    <th style="flex:1;padding-top:2%">Region</th>
                    <th style="flex:1;padding-top:2%">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var address in LeaseholderViewModel.AddressesWithoutLeaseholderId)
                {
                    IncrementSequenceNumber();

                    <tr style="display:flex;margin-right:50%;">
                        <td style="flex:1;padding-top:3%">@sequenceNumber</td>
                        <td style="flex:1;padding-top:3%">@address.PostalCode</td>
                        <td style="flex:1;padding-top:3%">@address.ApartmentNumber</td>
                        <td style="flex:1;padding-top:3%">@address.BuildingNumber</td>
                        <td style="flex:1;padding-top:3%">@address.Street</td>
                        <td style="flex:1;padding-top:3%">@address.City</td>
                        <td style="flex:1;padding-top:3%">@address.Region</td>
                        <td style="text-align:left;flex:1;padding-top:3%">
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="@(() => ShowEditAddressModalWindowAsync(address.Id))">Edit</button>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => ShowAddressDeletionConfirmationModalWindowAsync(address.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [CascadingParameter]
    public IModalService? ModalService { get; set; }

    [Parameter]
    public int Id { get; set; }

    private int sequenceNumber;

    private EditLeaseholderViewModel LeaseholderViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var leaseholder = await _leaseholderServiceEf.GetLeaseholderByIdEfAsync(Id);
        LeaseholderViewModel = new(leaseholder);
        LeaseholderViewModel.Addresses = await _addressServiceEf.GetAddressesListForSpecifiedLeaseholderEfAsync(Id);
        LeaseholderViewModel.AddressesWithoutLeaseholderId = LeaseholderViewModel.Addresses.Select(address =>
            _mapper.From(address).AdaptToType<AddressWithoutLeaseholderIdResponse>()).ToList();
        LeaseholderViewModel.EmailAddresses = await _emailAddressServiceEf.GetEmailAddressesListForSpecifiedLeaseholderEfAsync(Id);
        LeaseholderViewModel.EmailAddressesWithoutLeaseholderId = LeaseholderViewModel.EmailAddresses.Select(emailAddress =>
            _mapper.From(emailAddress).AdaptToType<EmailAddressWithoutLeaseholderIdResponse>()).ToList();
    }

    private void IncrementSequenceNumber()
    {
        sequenceNumber++;
    }

    private async Task ShowAddressDeletionConfirmationModalWindowAsync(int addressId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(AddressDeletionConfirmation_EntityFramework.AddressId), addressId);

        var addressDeletionConfirmationWindow = ModalService.Show<AddressDeletionConfirmation_EntityFramework>
            ("Are you sure you want to delete this address?", modalParameters);
        var addressDeletionConfirmationWindowResult = await addressDeletionConfirmationWindow.Result;
    }

    private async Task ShowEditAddressModalWindowAsync(int addressId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EditAddress_EntityFramework.AddressId), addressId);

        var editAddressEditForm = ModalService.Show<EditAddress_EntityFramework>("You can edit leaseholder's address below:", modalParameters);
        var editAddressEditFormResult = await editAddressEditForm.Result;
    }

    private async Task ShowEmailAddressDeletionConfirmationModalWindowAsync(int emailAddressId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EmailAddressDeletionConfirmation_EntityFramework.EmailAddressId), emailAddressId);

        var emailAddressDeletionConfirmationWindow = ModalService.Show<EmailAddressDeletionConfirmation_EntityFramework>
            ("Are you sure you want to delete this email address?", modalParameters);
        var emailAddressDeletionConfirmationWindowResult = await emailAddressDeletionConfirmationWindow.Result;
    }

    private async Task ShowEditEmailAddressModalWindowAsync(int emailAddressId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EditEmailAddress_EntityFramework.EmailAddressId), emailAddressId);

        var editEmailAddressEditForm = ModalService.Show<EditEmailAddress_EntityFramework>("You can edit leaseholder's email address below:", modalParameters);
        var editEmailAddressEditFormResult = await editEmailAddressEditForm.Result;
    }

    private async Task ShowEditLeaseholderPersonalDetailsModalWindowAsync(int leaseholderId)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(EditLeaseholderPersonalDetails_EntityFramework.LeaseholderId), leaseholderId);

        var editLeaseholderPersonalDetailsEditForm = ModalService.Show<EditLeaseholderPersonalDetails_EntityFramework>
            ("You can edit leaseholder's personal details below:", modalParameters);
        var editLeaseholderPersonalDetailsEditFormResult = await editLeaseholderPersonalDetailsEditForm.Result;
    }
}
