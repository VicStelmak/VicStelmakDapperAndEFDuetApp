@inject NavigationManager _navManager

<EditForm Model="@Address" OnValidSubmit="@SubmitAddressAsync">
    <div class="form-group">
        <label>Postal Code</label>
        <InputText class="form-control" @bind-Value="Address.PostalCode" />
    </div>
    <div class="form-group">
        <label>Apartment Number</label>
        <InputNumber class="form-control" @bind-Value="Address.ApartmentNumber" />
    </div>
    <div class="form-group">
        <label>Building Number</label>
        <InputText class="form-control" @bind-Value="Address.BuildingNumber" />
    </div>
    <div class="form-group">
        <label>Street</label>
        <InputText class="form-control" @bind-Value="Address.Street" />
    </div>
    <div class="form-group">
        <label>City</label>
        <InputText class="form-control" @bind-Value="Address.City" />
    </div>
    <div class="form-group">
        <label>Region</label>
        <InputText class="form-control" @bind-Value="Address.Region" />
    </div>

    <button type="submit" class="btn btn-primary" style="margin: 7px 0px">Update</button>
    <button type="button" class="btn btn-warning" style="margin: 7px 0px" @onclick="@(a => CancelEdit())">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public AddressModel Address { get; set; }

    private async void SubmitAddressAsync()
    {
        if (!string.IsNullOrEmpty(Address.PostalCode) && !string.IsNullOrEmpty(Address.BuildingNumber) && !string.IsNullOrEmpty(Address.Street)
            && !string.IsNullOrEmpty(Address.City) && !string.IsNullOrEmpty(Address.Region) && Address.ApartmentNumber != 0)
        {
            await _addressServiceEf.UpdateAddressEfAsync(Address);
        }

        _navManager.NavigateTo(_navManager.Uri, true);
    }

    private void CancelEdit()
    {
        _navManager.NavigateTo(_navManager.Uri, true);
    }
}



