@inject NavigationManager _navManager

@if (LeaseholderViewModel != null)
{
    <EditForm Model="@LeaseholderViewModel" OnValidSubmit="@SubmitLeaseholderAsync">
        <div class="form-group">
            <label>First Name</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.FirstName" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.LastName" />
        </div>
        <div class="form-group">
            <label>Email Address</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.EmailAddress" />
        </div>
        <h2>Address</h2>
        <div class="form-group">
            <label>Postal Code</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.PostalCode" />
        </div>
        <div class="form-group">
            <label>Apartment Number</label>
            <InputNumber class="form-control" @bind-Value="LeaseholderViewModel.ApartmentNumber" />
        </div>
        <div class="form-group">
            <label>Building Number</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.BuildingNumber" />
        </div>
        <div class="form-group">
            <label>Street</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.Street" />
        </div>
        <div class="form-group">
            <label>City</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.City" />
        </div>
        <div class="form-group">
            <label>Region</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.Region" />
        </div>
        <br>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
}

@code {
    private AddLeaseholderViewModel LeaseholderViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LeaseholderViewModel = new();
    }

    private async void SubmitLeaseholderAsync()
    {
        if (LeaseholderViewModel.CheckIfValuesAreValid() == true)
        {
            var leaseholderCreatingRequest = _mapper.Map<CreateLeaseholderRequest>(LeaseholderViewModel);

            await _leaseholderServiceEf.CreateLeaseholderEfAsync(leaseholderCreatingRequest);
        }

        _navManager.NavigateTo("/leaseholdersinformation_entityframework", forceLoad:true);
    }
}
