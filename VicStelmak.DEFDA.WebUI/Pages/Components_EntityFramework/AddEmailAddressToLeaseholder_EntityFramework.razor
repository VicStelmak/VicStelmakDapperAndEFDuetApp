@inject NavigationManager _navManager

@if (EmailAddressViewModel != null)
{
    <div class="row">
        <div class="col-lg-9">
            <h2>@EmailAddressViewModel.FirstName @EmailAddressViewModel.LastName</h2><br>
        </div>
    </div>

    <EditForm Model="@EmailAddressViewModel" OnValidSubmit="@SubmitEmailAddressAsync">
        <div class="form-group">
            <label>You Can Add Email Address Below:</label>
            <InputText class="form-control" @bind-Value="EmailAddressViewModel.EmailAddress" />
        </div>
        <br>
        <button type="submit" class="btn btn-primary">Add</button>
        <button type="button" class="btn btn-warning" style="margin: 7px 0px" @onclick="@(e => CancelEdit())">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int LeaseholderId { get; set; }

    private AddEmailAddressToLeaseholderViewModel EmailAddressViewModel { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        var leaseholder = await _leaseholderServiceEf.GetLeaseholderByIdEfAsync(LeaseholderId);
        EmailAddressViewModel = new(leaseholder);
    }

    private async void SubmitEmailAddressAsync()
    {
        if (EmailAddressViewModel.CheckIfValuesAreValid() == true)
        {
            var emailAddressCreatingRequest = _mapper.Map<CreateEmailAddressRequest>(EmailAddressViewModel);

            await _emailAddressServiceEf.CreateEmailAddressByLeaseholderIdEfAsync(emailAddressCreatingRequest, LeaseholderId);
        }

        _navManager.NavigateTo("/leaseholdersinformation_entityframework", forceLoad:true);
    }

    private void CancelEdit()
    {
        _navManager.NavigateTo("/leaseholdersinformation_entityframework");
    }
}

