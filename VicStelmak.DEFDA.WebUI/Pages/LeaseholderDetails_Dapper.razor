@page "/leaseholdersinformation_dapper/details/{id:int}"

<PageTitle>Leaseholders Information</PageTitle>

@if (LeaseholderViewModel != null)
{
    <div class="row">
        <div class="col-lg-3 text-right">
            <a type="button" class="btn btn-secondary btn-sm" href="/leaseholdersinformation_dapper">Go Back To List</a>
        </div>
    </div>
    <br />
    <table class="table">
        <tbody>
            <tr>
                <th scope="row">Leaseholder First Name</th>
                <td>@LeaseholderViewModel.FirstName</td>
            </tr>
            <tr>
                <th scope="row">Leaseholder Last Name</th>
                <td>@LeaseholderViewModel.LastName</td>
            </tr>
            <tr>
                <th scope="row">Leaseholder Addresses</th>
                <td>
                    <ul>
                        @foreach (var address in LeaseholderViewModel.Addresses)
                        {
                            <li>@address.PostalCode, @address.ApartmentNumber, @address.BuildingNumber, @address.Street, @address.City, @address.Region</li>
                        }
                    </ul>
                </td>
            </tr>
            <tr>
                <th scope="row">Leaseholder's Email Addresses</th>
                <td>
                    <ul>
                        @foreach (var emailAddress in LeaseholderViewModel.EmailAddresses)
                        {
                            <li>@emailAddress.EmailAddress</li>
                        }
                    </ul>
                </td>
            </tr>
        </tbody>
    </table>

    @code {
    [Parameter]
    public int Id { get; set; }

    private LeaseholderDetailsDapperViewModel? LeaseholderViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var leaseholder = await _mediator.Send(new GetLeaseholderByIdDapperQuery(Id));
        LeaseholderViewModel = new(leaseholder);
        LeaseholderViewModel.Addresses = await _mediator.Send(new GetAddressesListForSpecifiedLeaseholderDapperQuery(Id));
        LeaseholderViewModel.AddressesWithoutIdAndLeaseholderId = LeaseholderViewModel.Addresses.Select(
            address => _mapper.From(address).AdaptToType<AddressWithoutIdAndLeaseholderIdResponse>()).ToList();
        LeaseholderViewModel.EmailAddresses = await _mediator.Send(new GetEmailAddressesListForSpecifiedLeaseholderDapperQuery(Id));
        LeaseholderViewModel.EmailAddressesWithoutIdAndLeaseholderId = LeaseholderViewModel.EmailAddresses.Select(
            emailAddress => _mapper.From(emailAddress).AdaptToType<EmailAddressWithoutIdAndLeaseholderIdResponse>()).ToList();
    }
    }
}


