@inject NavigationManager _navManager

@if (Leaseholder != null)
{
    <EditForm Model="@Leaseholder" OnValidSubmit="@SubmitLeaseholderAsync">
        <div class="form-group">
            <label>First Name</label>
            <InputText class="form-control" @bind-Value="Leaseholder.FirstName" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText class="form-control" @bind-Value="Leaseholder.LastName" />
        </div>
        <div class="form-group">
            <label>Email Address</label>
            <InputText class="form-control" @bind-Value="EmailAddress.EmailAddress" />
        </div>
        <h2>Address</h2>
        <div class="form-group">
            <label>Postal Code</label>
            <InputText class="form-control" @bind-Value="Address.PostalCode" />
        </div>
        <div class="form-group">
            <label>Apartment Number</label>
            <InputNumber class="form-control" @bind-Value="Address.ApartmentNumber" />
        </div>
        <div class="form-group">
            <label>Building Number</label>
            <InputText class="form-control" @bind-Value="Address.BuildingNumber" />
        </div>
        <div class="form-group">
            <label>Street</label>
            <InputText class="form-control" @bind-Value="Address.Street" />
        </div>
        <div class="form-group">
            <label>City</label>
            <InputText class="form-control" @bind-Value="Address.City" />
        </div>
        <div class="form-group">
            <label>Region</label>
            <InputText class="form-control" @bind-Value="Address.Region" />
        </div>
        <br>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
}


@code {
    private AddressModel Address { get; set; }
    private EmailAddressModel EmailAddress { get; set; }
    private LeaseholderModel Leaseholder { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Address = new AddressModel();
        EmailAddress = new EmailAddressModel();
        Leaseholder = new LeaseholderModel();
    }

    private async void SubmitLeaseholderAsync()
    {
        if(CheckIfValuesAreValid() == true)
        {
            await _leaseholderServiceDapper.CreateLeaseholderDapper(Address, EmailAddress, Leaseholder);
        }

        _navManager.NavigateTo("/leaseholdersinformation_dapper", forceLoad: true);
    }

    private bool CheckIfValuesAreValid ()
    {
        if (!string.IsNullOrEmpty(Address.PostalCode) && !string.IsNullOrEmpty(Address.BuildingNumber) && !string.IsNullOrEmpty(Address.Street)
        && !string.IsNullOrEmpty(Address.City) && !string.IsNullOrEmpty(Address.Region) && Address.ApartmentNumber != 0 && !string.IsNullOrEmpty(EmailAddress.EmailAddress))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

