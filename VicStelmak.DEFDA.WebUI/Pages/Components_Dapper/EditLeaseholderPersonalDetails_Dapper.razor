@inject NavigationManager _navManager

@if (LeaseholderViewModel != null)
{
    <EditForm Model="@LeaseholderViewModel" OnValidSubmit="@SubmitLeaseholderAsync">
        <div class="form-group">
            <label>First Name</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.FirstName" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText class="form-control" @bind-Value="LeaseholderViewModel.LastName" />
        </div>
        <button type="submit" class="btn btn-primary" style="margin: 7px 0px">Update</button>
        <button type="button" class="btn btn-warning" style="margin: 7px 0px" @onclick="@(e => CancelEdit())">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int LeaseholderId { get; set; }

    private EditLeaseholderPersonalDetailsViewModel LeaseholderViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var leaseholder = await _mediator.Send(new GetLeaseholderByIdDapperQuery(LeaseholderId));
        LeaseholderViewModel = new(leaseholder);
    }

    private async void SubmitLeaseholderAsync()
    {
        if (LeaseholderViewModel.CheckIfValuesAreValid())
        {
            var leaseholderUpdatingRequest = _mapper.From(LeaseholderViewModel).AdaptToType<UpdateLeaseholderRequest>();
            
            await _mediator.Send(new UpdateLeaseholderDapperCommand(LeaseholderId, leaseholderUpdatingRequest));
        }

        _navManager.NavigateTo(_navManager.Uri, true);
    }

    private void CancelEdit()
    {
        _navManager.NavigateTo(_navManager.Uri, true);
    }
}


