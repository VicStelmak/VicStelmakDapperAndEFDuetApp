@inject NavigationManager _navManager

@if (AddressViewModel != null)
{
    <div class="row">
        <div class="col-lg-9">
            <h2>@AddressViewModel.FirstName @AddressViewModel.LastName</h2><br>
        </div>
    </div>

    <EditForm Model="@AddressViewModel" OnValidSubmit="@SubmitAddressAsync">
        <div class="form-group">
            <label>Postal Code</label>
            <InputText id="PostalCode" class="form-control" @bind-Value="AddressViewModel.PostalCode" />
        </div>
        <div class="form-group">
            <label>Apartment Number</label>
            <InputNumber class="form-control" @bind-Value="AddressViewModel.ApartmentNumber" />
        </div>
        <div class="form-group">
            <label>Building Number</label>
            <InputText class="form-control" @bind-Value="AddressViewModel.BuildingNumber" />
        </div>
        <div class="form-group">
            <label>Street</label>
            <InputText class="form-control" @bind-Value="AddressViewModel.Street" />
        </div>
        <div class="form-group">
            <label>City</label>
            <InputText class="form-control" @bind-Value="AddressViewModel.City" />
        </div>
        <div class="form-group">
            <label>Region</label>
            <InputText class="form-control" @bind-Value="AddressViewModel.Region" />
        </div>
        <br>
        <button type="submit" class="btn btn-primary">Add Address</button>
        <button type="button" class="btn btn-warning" style="margin: 7px 0px" @onclick="@(e => CancelEdit())">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int LeaseholderId { get; set; }
    
    private AddAddressToLeaseholderDapperViewModel AddressViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var leaseholder = await _mediator.Send(new GetLeaseholderByIdDapperQuery(LeaseholderId));
        AddressViewModel = new(leaseholder);
    }

    private async void SubmitAddressAsync()
    {
        if (AddressViewModel.CheckIfValuesAreValid() == true)
        {
            var addressCreatingRequest = _mapper.Map<CreateAddressRequest>(AddressViewModel);

            await _mediator.Send(new CreateAddressByLeaseholderIdDapperCommand(addressCreatingRequest, LeaseholderId));
        }

        _navManager.NavigateTo("/leaseholdersinformation_dapper", forceLoad: true);
    }

    private void CancelEdit()
    {
        _navManager.NavigateTo("/leaseholdersinformation_dapper");
    }
}

